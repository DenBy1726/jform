!function(e){function t(t){for(var r,o,a=t[0],l=t[1],i=t[2],c=0,s=[];c<a.length;c++)o=a[c],Object.prototype.hasOwnProperty.call(F,o)&&F[o]&&s.push(F[o][0]),F[o]=0;for(r in l)Object.prototype.hasOwnProperty.call(l,r)&&(e[r]=l[r]);for(I&&I(t);s.length;)s.shift()();return q.push.apply(q,i||[]),n()}function n(){for(var e,t=0;t<q.length;t++){for(var n=q[t],r=!0,o=1;o<n.length;o++){var a=n[o];0!==F[a]&&(r=!1)}r&&(q.splice(t--,1),e=D(D.s=n[0]))}return e}var r=window.webpackHotUpdate;window.webpackHotUpdate=function(e,t){!function(e,t){if(!w[e]||!O[e])return;for(var n in O[e]=!1,t)Object.prototype.hasOwnProperty.call(t,n)&&(h[n]=t[n]);0==--v&&0===g&&k()}(e,t),r&&r(e,t)};var o,a=!0,l="fe72d53ef6cfc38cfaa4",i={},c=[],s=[];function u(t){var n={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:o!==t,active:!0,accept:function(e,t){if(void 0===e)n._selfAccepted=!0;else if("function"==typeof e)n._selfAccepted=e;else if("object"==typeof e)for(var r=0;r<e.length;r++)n._acceptedDependencies[e[r]]=t||function(){};else n._acceptedDependencies[e]=t||function(){}},decline:function(e){if(void 0===e)n._selfDeclined=!0;else if("object"==typeof e)for(var t=0;t<e.length;t++)n._declinedDependencies[e[t]]=!0;else n._declinedDependencies[e]=!0},dispose:function(e){n._disposeHandlers.push(e)},addDisposeHandler:function(e){n._disposeHandlers.push(e)},removeDisposeHandler:function(e){var t=n._disposeHandlers.indexOf(e);t>=0&&n._disposeHandlers.splice(t,1)},invalidate:function(){switch(this._selfInvalidated=!0,m){case"idle":(h={})[t]=e[t],f("ready");break;case"ready":P(t);break;case"prepare":case"check":case"dispose":case"apply":(b=b||[]).push(t)}},check:E,apply:N,status:function(e){if(!e)return m;d.push(e)},addStatusHandler:function(e){d.push(e)},removeStatusHandler:function(e){var t=d.indexOf(e);t>=0&&d.splice(t,1)},data:i[t]};return o=void 0,n}var d=[],m="idle";function f(e){m=e;for(var t=0;t<d.length;t++)d[t].call(null,e)}var p,h,y,b,v=0,g=0,j={},O={},w={};function x(e){return+e+""===e?+e:e}function E(e){if("idle"!==m)throw new Error("check() is only allowed in idle status");return a=e,f("check"),(t=1e4,t=t||1e4,new Promise((function(e,n){if("undefined"==typeof XMLHttpRequest)return n(new Error("No browser support"));try{var r=new XMLHttpRequest,o=D.p+""+l+".hot-update.json";r.open("GET",o,!0),r.timeout=t,r.send(null)}catch(e){return n(e)}r.onreadystatechange=function(){if(4===r.readyState)if(0===r.status)n(new Error("Manifest request to "+o+" timed out."));else if(404===r.status)e();else if(200!==r.status&&304!==r.status)n(new Error("Manifest request to "+o+" failed."));else{try{var t=JSON.parse(r.responseText)}catch(e){return void n(e)}e(t)}}}))).then((function(e){if(!e)return f(C()?"ready":"idle"),null;O={},j={},w=e.c,y=e.h,f("prepare");var t=new Promise((function(e,t){p={resolve:e,reject:t}}));for(var n in h={},F)S(n);return"prepare"===m&&0===g&&0===v&&k(),t}));var t}function S(e){w[e]?(O[e]=!0,v++,function(e){var t=document.createElement("script");t.charset="utf-8",t.src=D.p+""+e+"."+l+".hot-update.js",document.head.appendChild(t)}(e)):j[e]=!0}function k(){f("ready");var e=p;if(p=null,e)if(a)Promise.resolve().then((function(){return N(a)})).then((function(t){e.resolve(t)}),(function(t){e.reject(t)}));else{var t=[];for(var n in h)Object.prototype.hasOwnProperty.call(h,n)&&t.push(x(n));e.resolve(t)}}function N(t){if("ready"!==m)throw new Error("apply() is only allowed in ready status");return function t(n){var r,a,s,u,d;function m(e){for(var t=[e],n={},r=t.map((function(e){return{chain:[e],id:e}}));r.length>0;){var o=r.pop(),a=o.id,l=o.chain;if((u=A[a])&&(!u.hot._selfAccepted||u.hot._selfInvalidated)){if(u.hot._selfDeclined)return{type:"self-declined",chain:l,moduleId:a};if(u.hot._main)return{type:"unaccepted",chain:l,moduleId:a};for(var i=0;i<u.parents.length;i++){var c=u.parents[i],s=A[c];if(s){if(s.hot._declinedDependencies[a])return{type:"declined",chain:l.concat([c]),moduleId:a,parentId:c};-1===t.indexOf(c)&&(s.hot._acceptedDependencies[a]?(n[c]||(n[c]=[]),p(n[c],[a])):(delete n[c],t.push(c),r.push({chain:l.concat([c]),id:c})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function p(e,t){for(var n=0;n<t.length;n++){var r=t[n];-1===e.indexOf(r)&&e.push(r)}}C();var v={},g=[],j={},O=function(){console.warn("[HMR] unexpected require("+S.moduleId+") to disposed module")};for(var E in h)if(Object.prototype.hasOwnProperty.call(h,E)){var S;d=x(E),S=h[E]?m(d):{type:"disposed",moduleId:E};var k=!1,N=!1,P=!1,q="";switch(S.chain&&(q="\nUpdate propagation: "+S.chain.join(" -> ")),S.type){case"self-declined":n.onDeclined&&n.onDeclined(S),n.ignoreDeclined||(k=new Error("Aborted because of self decline: "+S.moduleId+q));break;case"declined":n.onDeclined&&n.onDeclined(S),n.ignoreDeclined||(k=new Error("Aborted because of declined dependency: "+S.moduleId+" in "+S.parentId+q));break;case"unaccepted":n.onUnaccepted&&n.onUnaccepted(S),n.ignoreUnaccepted||(k=new Error("Aborted because "+d+" is not accepted"+q));break;case"accepted":n.onAccepted&&n.onAccepted(S),N=!0;break;case"disposed":n.onDisposed&&n.onDisposed(S),P=!0;break;default:throw new Error("Unexception type "+S.type)}if(k)return f("abort"),Promise.reject(k);if(N)for(d in j[d]=h[d],p(g,S.outdatedModules),S.outdatedDependencies)Object.prototype.hasOwnProperty.call(S.outdatedDependencies,d)&&(v[d]||(v[d]=[]),p(v[d],S.outdatedDependencies[d]));P&&(p(g,[S.moduleId]),j[d]=O)}var _,B=[];for(a=0;a<g.length;a++)d=g[a],A[d]&&A[d].hot._selfAccepted&&j[d]!==O&&!A[d].hot._selfInvalidated&&B.push({module:d,parents:A[d].parents.slice(),errorHandler:A[d].hot._selfAccepted});f("dispose"),Object.keys(w).forEach((function(e){!1===w[e]&&function(e){delete F[e]}(e)}));var $,I,M=g.slice();for(;M.length>0;)if(d=M.pop(),u=A[d]){var H={},K=u.hot._disposeHandlers;for(s=0;s<K.length;s++)(r=K[s])(H);for(i[d]=H,u.hot.active=!1,delete A[d],delete v[d],s=0;s<u.children.length;s++){var T=A[u.children[s]];T&&((_=T.parents.indexOf(d))>=0&&T.parents.splice(_,1))}}for(d in v)if(Object.prototype.hasOwnProperty.call(v,d)&&(u=A[d]))for(I=v[d],s=0;s<I.length;s++)$=I[s],(_=u.children.indexOf($))>=0&&u.children.splice(_,1);f("apply"),void 0!==y&&(l=y,y=void 0);for(d in h=void 0,j)Object.prototype.hasOwnProperty.call(j,d)&&(e[d]=j[d]);var W=null;for(d in v)if(Object.prototype.hasOwnProperty.call(v,d)&&(u=A[d])){I=v[d];var z=[];for(a=0;a<I.length;a++)if($=I[a],r=u.hot._acceptedDependencies[$]){if(-1!==z.indexOf(r))continue;z.push(r)}for(a=0;a<z.length;a++){r=z[a];try{r(I)}catch(e){n.onErrored&&n.onErrored({type:"accept-errored",moduleId:d,dependencyId:I[a],error:e}),n.ignoreErrored||W||(W=e)}}}for(a=0;a<B.length;a++){var R=B[a];d=R.module,c=R.parents,o=d;try{D(d)}catch(e){if("function"==typeof R.errorHandler)try{R.errorHandler(e)}catch(t){n.onErrored&&n.onErrored({type:"self-accept-error-handler-errored",moduleId:d,error:t,originalError:e}),n.ignoreErrored||W||(W=t),W||(W=e)}else n.onErrored&&n.onErrored({type:"self-accept-errored",moduleId:d,error:e}),n.ignoreErrored||W||(W=e)}}if(W)return f("fail"),Promise.reject(W);if(b)return t(n).then((function(e){return g.forEach((function(t){e.indexOf(t)<0&&e.push(t)})),e}));return f("idle"),new Promise((function(e){e(g)}))}(t=t||{})}function C(){if(b)return h||(h={}),b.forEach(P),b=void 0,!0}function P(t){Object.prototype.hasOwnProperty.call(h,t)||(h[t]=e[t])}var A={},F={0:0},q=[];function D(t){if(A[t])return A[t].exports;var n=A[t]={i:t,l:!1,exports:{},hot:u(t),parents:(s=c,c=[],s),children:[]};return e[t].call(n.exports,n,n.exports,function(e){var t=A[e];if(!t)return D;var n=function(n){return t.hot.active?(A[n]?-1===A[n].parents.indexOf(e)&&A[n].parents.push(e):(c=[e],o=n),-1===t.children.indexOf(n)&&t.children.push(n)):(console.warn("[HMR] unexpected require("+n+") from disposed module "+e),c=[]),D(n)},r=function(e){return{configurable:!0,enumerable:!0,get:function(){return D[e]},set:function(t){D[e]=t}}};for(var a in D)Object.prototype.hasOwnProperty.call(D,a)&&"e"!==a&&"t"!==a&&Object.defineProperty(n,a,r(a));return n.e=function(e){return"ready"===m&&f("prepare"),g++,D.e(e).then(t,(function(e){throw t(),e}));function t(){g--,"prepare"===m&&(j[e]||S(e),0===g&&0===v&&k())}},n.t=function(e,t){return 1&t&&(e=n(e)),D.t(e,-2&t)},n}(t)),n.l=!0,n.exports}D.e=function(e){var t=[],n=F[e];if(0!==n)if(n)t.push(n[2]);else{var r=new Promise((function(t,r){n=F[e]=[t,r]}));t.push(n[2]=r);var o,a=document.createElement("script");a.charset="utf-8",a.timeout=120,D.nc&&a.setAttribute("nonce",D.nc),a.src=function(e){return D.p+"@jform/"+e+".demo.js"}(e);var l=new Error;o=function(t){a.onerror=a.onload=null,clearTimeout(i);var n=F[e];if(0!==n){if(n){var r=t&&("load"===t.type?"missing":t.type),o=t&&t.target&&t.target.src;l.message="Loading chunk "+e+" failed.\n("+r+": "+o+")",l.name="ChunkLoadError",l.type=r,l.request=o,n[1](l)}F[e]=void 0}};var i=setTimeout((function(){o({type:"timeout",target:a})}),12e4);a.onerror=a.onload=o,document.head.appendChild(a)}return Promise.all(t)},D.m=e,D.c=A,D.d=function(e,t,n){D.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},D.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},D.t=function(e,t){if(1&t&&(e=D(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(D.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)D.d(n,r,function(t){return e[t]}.bind(null,r));return n},D.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return D.d(t,"a",t),t},D.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},D.p="./",D.oe=function(e){throw console.error(e),e},D.h=function(){return l};var _=window.webpackJsonp=window.webpackJsonp||[],B=_.push.bind(_);_.push=t,_=_.slice();for(var $=0;$<_.length;$++)t(_[$]);var I=B;q.push([869,1]),n()}({1405:function(e,t,n){var r=n(644);"string"==typeof r&&(r=[[e.i,r,""]]);var o={transform:void 0},a=n(33)(r,o);r.locals&&(e.exports=r.locals),r.locals||e.hot.accept(644,(function(){var t=n(644);"string"==typeof t&&(t=[[e.i,t,""]]),a(t)})),e.hot.dispose((function(){a()}))},1529:function(e,t,n){"use strict";n.r(t);var r=n(1),o=n.n(r),a=n(153),l=(n(456),n(277)),i=n.n(l),c=(n(876),n(877),n(573),n(373)),s=n.n(c),u=(n(576),n(88)),d=n(68),m=function(){var e=Object(u.f)((function(e){return e.menu.header})),t=Object(u.e)((function(e){return e.menu.selectMenu})),n=Object(d.e)(),a="/"+Object(d.d)().pathname.split("/")[1];return Object(r.useEffect)((function(){t(a)}),[a]),o.a.createElement(s.a,{selectedKeys:[a],onSelect:function(e){var t=e.key;n(t)},className:"menu",theme:"dark",mode:"horizontal",items:e})},f=(n(1026),n(854)),p=n.n(f),h=n(208),y=n.n(h),b=n(227),v=n.n(b),g=n(849),j=n.n(g),O=n(867),w=n(31),x=n(852),E=n(526),S=n(1572),k=n(63),N=n(563),C=n.n(N),P=n(850),A=n.n(P),F=n(851),q=n.n(F);function D(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function _(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?D(Object(n),!0).forEach((function(t){B(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):D(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function B(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function $(){return($=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function I(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}function M(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function H(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(n)return(n=n.call(e)).next.bind(n);if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return M(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?M(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0;return function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function K(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,t||"default");if("object"!=typeof r)return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:String(t)}var T=function e(t,n){var r;if(void 0===n&&(n={}),null==(r=t)||!r.startsWith("#"))throw new Error("Could not find a definition for "+t+".");t=decodeURIComponent(t.substring(1));var o=j.a.get(n,t);if(void 0===o)throw new Error("Could not find a definition for "+t+".");if(o.$ref){var a=e(o.$ref,n);return Object.keys(o).length>1?_(_({},Object(O.a)(o,["$ref"])),a):a}return o},W=function(e){return Array.isArray(e)?"array":"string"==typeof e?"string":null==e?"null":"boolean"==typeof e?"boolean":isNaN(e)?"object"==typeof e?"object":"string":"number"},z=function(e){var t=e.type;if(!t){if(e.const)return W(e.const);if(e.enum)return e.enum.length>0?W(e.enum[0]):"string";if(e.properties||e.additionalProperties)return"object"}return Array.isArray(t)&&2===t.length&&t.includes("null")&&(t=t.find((function(e){return"null"!==e}))),t||"string"},R=function(e){return!("undefined"!=typeof File&&e instanceof File)&&("object"==typeof e&&null!==e&&!Array.isArray(e))},L=function(e,t,n,r,o){return"required"===n&&Object(w.a)(e)&&Object(w.a)(t)&&("object"===z(r)||"object"===z(o))?Object(x.a)(e,t):n.endsWith("lassName")&&"string"==typeof e&&"string"==typeof t?Object(x.a)(e.split(" "),t.split(" ")).join(" "):Object(w.a)(e)&&R(t)||R(e)&&Object(w.a)(t)||Object(w.a)(e)&&Object(w.a)(t)?t:void 0},J=function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return E.a.apply(void 0,[e].concat(n,[L]))},U=["schema"],Y={additionalItems:!0,items:!0,contains:!0,propertyNames:!0,not:!0,if:!0,then:!0,else:!0,allOf:!0,anyOf:!0,oneOf:!0,$defs:!0,definitions:!0,properties:!0,patternProperties:!0,dependencies:!0,"^d+$":!0},X=Object.keys(Y).join("|"),G=function(e,t,n){return C()(e||{},(function(e,r,o){var a,l=o.replace(new RegExp(X,"g"),"").split("/").filter((function(e){return""!==e})).map((function(e){return"additionalProperties"===e?e:"$"+e})),i=l.join(".");a=l.length>0?Object.entries(t).map((function(e){var t,n=e[0],r=e[1];return(t={})[n]=S.a.get(r,i),t})).reduce((function(e,t){return _(_({},e),t)})):t;var c=n(e,a);if(c){var s=c.schema,u=void 0===s?e:s,d=I(c,U);return 0===l.length?S.a.merge(t,d):Object.entries(d).forEach((function(e){var n=e[0],r=e[1];return S.a.set(t[n],i,r)})),u}return e}),{bfs:!0,mutable:!0})},Q=function(e,t){var n=_(_({},t),e);return delete n.$ref,n},V=function(){function e(e,t){void 0===t&&(t={}),this.options=t,this.refCache={},void 0===this.options.recursive&&(this.options.recursive=!0),void 0===this.options.rootSchema&&(this.options.rootSchema=e),!0!==e&&!1!==e&&e.$id&&(this.options.rootSchema=e),this.options.refCache&&(this.refCache=this.options.refCache),this.schema=e,this.refs=this.collectRefs()}var t=e.prototype;return t.resolve=function(){var t={};if(!0===this.schema||!1===this.schema)return this.schema;if(0===this.refs.length)return this.schema;for(var n,r=H(this.refs.filter((function(e){return void 0===t[e]})));!(n=r()).done;){var o=n.value,a=void 0;if(void 0!==this.refCache[o])a=this.refCache[o];else if("#"===o){if(void 0===this.options.rootSchema)throw new Error("options.rootSchema was not provided, but one of the schemas references '#'");a=this.options.rootSchema}else a=T(o,this.options.rootSchema);if(!0===this.options.recursive&&!0!==a&&!1!==a&&"#"!==o){var l=new e(a,_(_({},this.options),{},{refCache:this.refCache}));if(0!==l.refs.length){var i=l.resolve();t[o]=Q(a,i)}else t[o]=a}else t[o]=a;this.refCache[o]=t[o]}return void 0!==this.schema.$ref?this.schema=Q(this.schema,t[this.schema.$ref]):C()(this.schema,(function(e){if(!0===e||!1===e)return e;if(void 0!==e.$ref){var n=t[e.$ref];return Q(e,n)}return e}),{mutable:!0}),this.schema},t.collectRefs=function(){var e=[];return C()(this.schema,(function(t){if(!0===t||!1===t)return t;if(t.$ref&&-1===e.indexOf(t.$ref)){if("string"!=typeof t.$ref)throw new Error("Found an improperly formatted $ref in schema. $ref must be a string");e.push(t.$ref)}return t})),e},e}(),Z=function(e,t){return new V(e||{},{rootSchema:t}).resolve()},ee=["allOf"],te=["if","then","else"],ne="__jform_rootSchema",re=function(){return new q.a({allErrors:!0,multipleOfPrecision:8})}(),oe=function(e,t,n){try{return re.addSchema(n,ne).validate(function e(t){var n=t;if(t.constructor===Object)for(var r in n=_({},t)){var o=n[r];"$ref"===r&&"string"==typeof o&&o.startsWith("#")?n[r]=ne+o:n[r]=e(o)}else if(Array.isArray(t)){n=[].concat(t);for(var a=0;a<n.length;a++)n[a]=e(n[a])}return n}(e),t)}catch(e){return!1}finally{re.removeSchema(ne)}},ae=["$ref"],le=["oneOf"],ie=["dependencies"],ce=function(e,t,n,r,o){var a=pe(o,t,n),l=a.oneOf,i=I(a,le);if(e=J({},e,i),void 0===l)return e;if(!Array.isArray(l))throw new Error("invalid: it is some "+typeof l+" instead of an array");var c=l.map((function(e){return e.$ref?function(e,t,n){var r=T(e.$ref,t),o=I(e,ae);return pe(_(_({},r),o),t,n)}(e,t,n):e}));return function(e,t,n,r,o){var a=o.filter((function(e){if(!e.properties)return!1;var o=e.properties[r];if(o){var a,l={type:"object",properties:(a={},a[r]=o,a)};return oe(l,n,t)}return!1}));if(1!==a.length)return console.warn("ignoring oneOf in dependencies because there isn't exactly one subschema that is valid"),e;var l=a[0],i=I(l.properties,[r].map(K)),c=_(_({},l),{},{properties:i});return J({},e,pe(c,t,n))}(e,t,n,r,c)},se=function(e,t){if(!t)return e;var n=Array.isArray(e.required)?Array.from(new Set([].concat(e.required,t))):t;return _(_({},e),{},{required:n})};function ue(e,t,n){if(void 0===e)return 0;for(var r=0;r<t.length;r++){var o=t[r];if(o.properties){var a={anyOf:Object.keys(o.properties).map((function(e){return{required:[e]}}))},l=void 0;if(o.anyOf){var i=$({},o);i.allOf?i.allOf=i.allOf.slice():i.allOf=[],i.allOf.push(a),l=i}else l=Object.assign({},o,a);if(delete l.required,oe(l,e,n))return r}else if(oe(o,e,n))return r}return 0}var de=function(e,t,n){var r=e.dependencies,o=void 0===r?{}:r,a=I(e,ie);return void 0!==a.oneOf?a=a.oneOf[ue(n,a.oneOf,t)]:void 0!==a.anyOf&&(a=a.anyOf[ue(n,a.anyOf,t)]),function e(t,n,r,o){for(var a in t)if(void 0!==o[a]&&(!n.properties||a in n.properties)){var l=t[a],i=I(t,[a].map(K));return Array.isArray(l)?n=se(n,l):R(l)&&(n=ce(n,r,o,a,l)),e(i,n,r,o)}return n}(o,a,t,n)},me=function(e,t,n){var r=de(e,t,n);return pe(r,t,n)},fe={$ref:Z,dependencies:me,allOf_before:function(e,t,n){return _(_({},e),{},{allOf:e.allOf.map((function(e){return pe(e,t,n)}))})},if:function(e,t,n){var r=e.if,o=e.then,a=e.else,l=I(e,te),i=oe(r,n,t)?o:a;return pe(i?J({},l,pe(i,t,n)):l,t,n)},properties:function(e,t,n){var r={};return Object.entries(e.properties).forEach((function(o){var a=o[0],l=o[1],i=n&&n[a],c=R(i)?i:{},s=pe(l,t,c);r[a]=s,l!==s&&e.properties!==r&&(e=_(_({},e),{},{properties:r}))})),e},allOf_after:function(e,t,n){try{return A()(_(_({},e),{},{allOf:e.allOf}))}catch(t){return I(e,ee)}},additionalProperties:function(e,t,n){return(e=_({},e)).properties?e.properties=_({},e.properties):"object"===e.type&&(e.properties={}),n=R(n)?n:{},Object.keys(n).forEach((function(r){if(!e.properties[r]){var o;if(e.additionalProperties.$ref)o=pe({$ref:e.additionalProperties.$ref},t,n);else if(e.additionalProperties.type)o=_({},e.additionalProperties);else{var a=W(n[r]);o={type:"null"!==a?a:"string"}}e.properties[r]=o,e.properties[r].__additional_property=!0}})),e}},pe=function(e,t,n){if(!Object(k.a)(e))return{};var r=e;return Object.entries(fe).forEach((function(e){var o=e[0],a=e[1],l=o.split("_")[0];r[l]&&(r=a(r,t,n))})),r};var he=function e(t){return!!t.const||(!(!t.enum||1!==t.enum.length||!0!==t.enum[0])||(t.anyOf&&1===t.anyOf.length?e(t.anyOf[0]):t.oneOf&&1===t.oneOf.length?e(t.oneOf[0]):!!t.allOf&&t.allOf.some(e)))},ye=function(e,t,n){return e.map((function(e,r){var o=Object.keys(e).map((function(n){return t(n,e[n])}));return n(o,r)}))},be=function(e,t){if(e.enum)return e.enum.map((function(e,n){return{label:(null==t?void 0:t.enumNames)&&(null==t?void 0:t.enumNames[n])||String(e),value:e}}));var n=e.oneOf||e.anyOf;return null==n?void 0:n.map((function(e){var t=function(e){if(Array.isArray(e.enum)&&1===e.enum.length)return e.enum[0];if(e.const)return e.const;throw new Error("schema cannot be inferred as a constant")}(e);return{schema:e,label:e.title||String(t),value:t}}))},ve=n(190),ge=n(239),je=n(1574),Oe=n(1573),we=n(1575),xe=n(335);function Ee(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Se(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ee(Object(n),!0).forEach((function(t){ke(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ee(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function ke(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Ne(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function Ce(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,t||"default");if("object"!=typeof r)return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:String(t)}const Pe=(e,t)=>Array.isArray(e.required)&&-1!==e.required.indexOf(t),Ae=(e,t,n)=>r=>{let o;o=Object(ve.a)(t)?Se(Se({},t),{},{[e]:r}):{[e]:r},n(o)},Fe={string:e=>{const{schema:t,configSchema:n={},data:r,required:a,disabled:l,autofocus:i,errors:c,widget:s,onBlur:u,onFocus:d,onChange:m,events:f}=e;let p=be(t,n);const{examples:h}=t,{placeholder:y,disabledOptions:b,className:v,id:g,style:j,theme:O,widget:w}=n,x={options:p,disabledOptions:b,autofocus:i,schema:t,configSchema:n,disabled:l,value:r,required:a,onChange:m,onBlur:u,onFocus:d,errors:c,placeholder:y,className:v,id:g,style:j,events:f,examples:h,theme:O,widget:w};return o.a.createElement(s,Object.assign({},x))},number:()=>o.a.createElement(o.a.Fragment,null),integer:()=>o.a.createElement(o.a.Fragment,null),boolean:e=>{const{schema:t,configSchema:n={},data:r,disabled:a,autofocus:l,errors:i,widget:c,onBlur:s,onFocus:u,onChange:d,events:m}=e;let f=((e,t)=>Array.isArray(e.oneOf)?be({oneOf:e.oneOf.map(e=>Se(Se({},e),{},{title:e.title||(!0===e.const?"Yes":"No")}))}):be({enum:e.enum||[!0,!1]},{enumNames:(null==t?void 0:t.enumNames)||(e.enum&&!1===e.enum[0]?["No","Yes"]:["Yes","No"])}))(t,n);const{examples:p}=t,{placeholder:h,className:y,id:b,style:v,theme:g,widget:j}=n,O={options:f,autofocus:l,schema:t,required:he(t),configSchema:n,disabled:a,value:r,onChange:d,onBlur:s,onFocus:u,errors:i,placeholder:h,className:y,id:b,style:v,events:m,examples:p,theme:g,widget:j};return o.a.createElement(c,Object.assign({},O))},object:e=>{const{data:t,schema:n,configSchema:r,eventSchema:a,readSchema:l,onBlur:i,onFocus:c,onChange:s,widget:u,required:d,disabled:m,autofocus:f,errors:p,events:h}=e;let y=((e,t)=>{if(!Array.isArray(t))return e;const n=e=>e.reduce((e,t)=>(e[t]=!0,e),{}),r=n(e),o=t.filter(e=>"*"===e||r[e]),a=n(o),l=e.filter(e=>!a[e]),i=o.indexOf("*");if(-1===i){if(l.length)throw new Error("configSchema order list does not contain "+((c=l).length>1?`properties '${c.join("', '")}'`:`property '${c[0]}'`));return o}var c;if(i!==o.lastIndexOf("*"))throw new Error("configSchema order list contains more than one wildcard item");const s=[...o];return s.splice(i,1,...l),s})(Object.keys(n.properties||{}),null==r?void 0:r.order),b={};y.length>0&&(b=y.map(e=>{var o;const u=null==n||null==(o=n.properties)?void 0:o[e],d=function(e){return void 0!==(null==e?void 0:e.__additional_property)}(u);return{[e]:{onChange:Ae(e,t,s),onBlur:i,onFocus:c,schema:u,configSchema:J({},(null==r?void 0:r.additionalProperties)||{},null==r?void 0:r["$"+e]),eventSchema:J({},(null==a?void 0:a.additionalProperties)||{},null==a?void 0:a["$"+e]),readSchema:J({},(null==l?void 0:l.additionalProperties)||{},null==l?void 0:l["$"+e]),required:Pe(n,e),value:t[e],isAdditional:d}}}).reduce((e,t)=>Se(Se({},e),t)));const{className:v,id:g,style:j,theme:O,widget:w}=r||{},x={properties:b,className:v,id:g,style:j,required:d,disabled:m,schema:n,autofocus:f,errors:p,events:h,value:t,theme:O,widget:w,onChange:s,onBlur:i,onFocus:c};return o.a.createElement(u,Object.assign({},x))},array:()=>o.a.createElement(o.a.Fragment,null),null:()=>o.a.createElement(o.a.Fragment,null)},qe=["onChange","onBlur","onFocus"],De=(e,t)=>void 0===e?{text:t}:Se(Se({},e),{},{text:e.text||t});const _e=(e,t)=>t?()=>{t(),e()}:()=>e();var Be=e=>{var t;const{schema:n,data:a,configSchema:l,eventSchema:i,errors:c,required:s,onBlur:u,onFocus:d,onChange:m,name:f,children:p}=e;let h=Object.keys(i||{}).filter(e=>!e.startsWith("$")).reduce((e,t)=>(e[t]=i[t],e),{}),{onChange:y,onBlur:b,onFocus:v}=h,g=Ne(h,qe);const j=n.type,O=(w=e=>{return m((t=e,n=null==l?void 0:l.empty,""===t?n:t));var t,n},(x=y)?e=>{x(e),w(e)}:e=>w(e));var w,x;const E=_e(u,b),S=_e(d,v),{template:k,widgets:N,defaults:C}=Object(r.useContext)(lt),P=De(null==l?void 0:l.title,n.title);var A;null!=P&&P.required&&(P.required.display=s||(null==P||null==(A=P.required)?void 0:A.display)||!1);P.text=(null==P?void 0:P.text)||(null==P?void 0:P.useName)&&f||void 0;const F=De(null==l?void 0:l.description,n.description),q=De(null==l?void 0:l.help),D=((e,t)=>{let n=[];return void 0!==t&&n.push(...t),void 0===e?{text:n}:void 0===e.text?Se(Se({},e),{},{text:[...n]}):Array.isArray(e.text)?Se(Se({},e),{},{text:[...n,...e.text]}):Se(Se({},e),{},{text:()=>e.text(n)})})(null==l?void 0:l.error,c),_=Object(r.useMemo)(()=>pe(n,n,a),[n,a]),B=function(e,t,n){var r,o,a,l,i,c,s;return"function"!=typeof(null==t?void 0:t.layout)&&null!=t&&null!=(r=t.layout)&&r.template&&"function"==typeof(null==(o=t.layout)?void 0:o.template)?null==(a=t.layout)?void 0:a.template:void 0!==(null==n||null==(l=n.type)||null==(i=l[e])?void 0:i.layout)?null==n||null==(c=n.type)||null==(s=c[e])?void 0:s.layout:n.common.field.layout}(j,l,k),$=function(e,t){if(void 0!==(null==t?void 0:t.field))return t.field;if(void 0===e)throw new Error(`unknown type ${e}. Supported: ${Object.keys(Fe).join(",")}`);return Fe[e]}(j,l);let I=function(e,t,n,r){var o;if("function"==typeof t)return t;var a,l,i,c,s=t;void 0===s&&void 0!==r&&void 0!==e&&(s=null==r||null==(a=r.type)||null==(l=a[e])||null==(i=l.configSchema)||null==(c=i.widget)?void 0:c.type);if(null!=n&&null!=(o=n[e])&&o[s||"undefined"])return n[e][s||"undefined"];throw null!=n&&n[e]?new Error('No widget "'+s+'" for type '+e+". Supported: "+Object.keys(n[e]).join(",")):new Error('No widget "'+s+'" for type '+e+"}")}(j,null==l||null==(t=l.widget)?void 0:t.type,N,C);const M=(null==l?void 0:l.layout)||{};return o.a.createElement(B,{title:P,description:F,help:q,hidden:null==l?void 0:l.hidden,errors:D,configSchema:l,name:f,className:M.className,errorClassName:M.errorClassName,rootClassName:M.rootClassName,style:M.style,id:M.id,tag:M.tag,render:M.render,type:j},o.a.createElement($,{widget:I,schema:_,configSchema:l,autofocus:!(null==l||!l.autofocus),disabled:!!(null!=l&&l.disabled||n.readOnly),data:a,required:!!s,eventSchema:i,errors:D,onChange:O,onBlur:E,onFocus:S,events:g,name:f}),p)};const $e=["template"],Ie=(e,t,n)=>{switch(typeof e){case"function":return e(t);case"object":return Object(ge.a)(e)?e:Me(e,t[n]);default:return e}},Me=(e,t)=>null===e?null:Object.entries(e).map(([e,n])=>({[e]:Ie(n,t,e)})).reduce((e,t)=>Se(Se({},e),t)),He=(e,t,n)=>{const{template:r}=e,o=Ne(e,$e);if(r)return e=>r(Se(Se({},e),o));{const r=n||t;return t=>{let n=Se(Se({},t),o),a=Me(e,n);return r(Se(Se({},n),a))}}},Ke=(e,t={md:12})=>Object.keys(e).map(e=>({[e]:Se({},t)}));const Te={common:{field:{layout:e=>{var t;const{title:n,description:a,help:l,errors:i,hidden:c,children:s,name:u,type:d,className:m="",errorClassName:f="",rootClassName:p="",style:h,id:y,tag:b="div",render:v}=e,{template:g}=Object(r.useContext)(lt),j=Object(r.useMemo)(()=>{var e,t;return He(n,g.common.field.title,null==g||null==(e=g.type)||null==(t=e[d])?void 0:t.title)},[n]),O=Object(r.useMemo)(()=>{var e,t;return He(a,g.common.field.description,null==g||null==(e=g.type)||null==(t=e[d])?void 0:t.description)},[a]),w=Object(r.useMemo)(()=>{var e,t;return He(l,g.common.field.help,null==g||null==(e=g.type)||null==(t=e[d])?void 0:t.help)},[l]),x=Object(r.useMemo)(()=>{var e,t;return He(i,g.common.field.error,null==g||null==(e=g.type)||null==(t=e[d])?void 0:t.error)},[i]);if(!0===(null==c?void 0:c.enable)){const{className:e="",id:t,style:n}=c;return o.a.createElement("div",{className:e,id:t,style:n})}let E="";!1!==(null==i?void 0:i.display)&&(null==i||null==(t=i.text)?void 0:t.length)>0&&(E=f);const S={title:!1!==n.display&&(()=>o.a.createElement(j,{key:"title",name:u})),description:!1!==a.display&&(()=>o.a.createElement(O,{key:"description"})),errors:!1!==i.display&&(()=>o.a.createElement(x,{key:"errors"})),help:!1!==l.display&&(()=>o.a.createElement(w,{key:"help"})),children:()=>s};let k;return k="function"==typeof v?v({Title:S.title||(()=>null),Description:S.description||(()=>null),children:S.children()||(()=>null),Errors:S.errors||(()=>null),Help:S.help||(()=>null)}):ye(v||Ke(S),(e,t)=>o.a.createElement(xe.a,Object.assign({styles:{breakpoints:{xs:0,sm:576,md:768,lg:992,xl:1200},containerMaxWidths:{sm:540,md:720,lg:960,xl:1140},columns:12,gutterWidth:0}},t,{key:e||"root"}),S[e]&&S[e]()),(e,t)=>o.a.createElement(xe.c,{styles:{breakpoints:{xs:0,sm:576,md:768,lg:992,xl:1200},containerMaxWidths:{sm:540,md:720,lg:960,xl:1140},columns:12,gutterWidth:0},key:t},e)),o.a.createElement(b,{className:""+[u?void 0:p,m,E].filter(e=>e&&e.length>0).join(" "),style:h,id:y},o.a.createElement(xe.b,{styles:{breakpoints:{xs:0,sm:576,md:768,lg:992,xl:1200},containerMaxWidths:{sm:540,md:720,lg:960,xl:1140},columns:12,gutterWidth:0}},k))},title:e=>{const{text:t,required:n={},id:r,className:a="",style:l,tag:i="label"}=e;if(null==t)return null;const c=(null==n?void 0:n.tag)||"span";return o.a.createElement(i,{style:l,className:a,id:r},t,!0===n.display&&n.text&&o.a.createElement(c,{className:n.className,style:n.style,id:n.id},n.text))},description:e=>{const{text:t,id:n,className:r="",style:a,tag:l="div"}=e;return t?o.a.createElement(l,{style:a,className:r,id:n},t):null},help:e=>{const{text:t,id:n,className:r="",style:a,tag:l="div"}=e;return t?o.a.createElement(l,{style:a,className:r,id:n},t):null},error:e=>{const{text:t=[],id:n,className:r="",style:a,errorClassName:l="",tag:i="ul"}=e;return 0===t.length?null:o.a.createElement("div",null,o.a.createElement(i,{id:n,style:a,className:r},t.filter(e=>!!e).map((e,t)=>o.a.createElement("li",{className:l,key:t},e))))},state:{view:({children:e})=>o.a.createElement(o.a.Fragment,null,e),loading:({children:e})=>o.a.createElement(o.a.Fragment,null,e)}},actions:({children:e})=>o.a.createElement(o.a.Fragment,null,e),button:({children:e})=>o.a.createElement(o.a.Fragment,null,e),error:({children:e})=>o.a.createElement(o.a.Fragment,null,e),tip:({children:e})=>o.a.createElement(o.a.Fragment,null,e)}};function We(e){const{options:t,disabledOptions:n,value:r,required:a,disabled:l,autofocus:i,onChange:c,onBlur:s,onFocus:u,placeholder:d,className:m,id:f,style:p,schema:h,configSchema:y}=e;return o.a.createElement("select",{id:f,style:p,className:m,value:r||(null==y?void 0:y.empty),required:a,disabled:l,autoFocus:i,onBlur:()=>s(),onFocus:()=>u(),onChange:e=>c(((e,t)=>{var n;const{type:r}=e;return""===t&&-1===(null==e||null==(n=e.enum)?void 0:n.indexOf(""))?null:"boolean"===r?"true"===t:t})(h,e.target.value))},void 0===h.default&&o.a.createElement("option",{value:""},d),null==t?void 0:t.map(({value:e,label:t},r)=>{const a=n&&-1!=n.indexOf(e);return o.a.createElement("option",{key:r,value:e,disabled:a},t)}))}const ze=["optional","render"],Re=(e,t,n,r)=>()=>{const o=e({name:t,data:n,removeKey:()=>Ne(n,[t].map(Ce))});r(o)},Le=(e,t,n)=>()=>{const r=e();n(Se(Se({},t),r))},Je={string:{text:function(e){const{autofocus:t,disabled:n,onChange:r,onFocus:a,onBlur:l,value:i,id:c,style:s,className:u,placeholder:d,examples:m,schema:f,required:p}=e;return o.a.createElement(o.a.Fragment,null,o.a.createElement("input",{type:"text",className:u,id:c,style:s,disabled:n,autoFocus:t,required:p,value:null==i?"":i,placeholder:d,onChange:e=>r(e.target.value),onBlur:()=>l(),onFocus:()=>a()}),m?o.a.createElement("datalist",null,[...new Set(m.concat(f.default?[f.default]:[]))].map(e=>o.a.createElement("option",{key:e,value:e}))):null)},select:We},number:{},integer:{},boolean:{checkbox:function(e){const{value:t,disabled:n,autofocus:r,onBlur:a,onFocus:l,onChange:i,className:c,id:s,style:u,required:d}=e;return o.a.createElement("input",{type:"checkbox",id:s,className:c,style:u,checked:void 0!==t&&t,required:d,disabled:n,autoFocus:r,onChange:e=>i(e.target.checked),onBlur:()=>a(),onFocus:()=>l()})},select:We},object:{grid:e=>{const{autofocus:t,disabled:n,properties:r={},className:a,required:l,id:i,style:c,widget:s,events:u,schema:d,value:m,onChange:f}=e,{itemClassName:p,itemStyle:h,additionalItemClassName:y,actionsClassName:b,actionClassName:v,addKeyButton:g,removeKeyButton:j,layout:O=Ke(r)}=s,{onAddKey:w,onRemoveKey:x}=u;let E;return E=Object(ge.a)(O)?O:Ke(r,O),o.a.createElement(xe.b,{styles:{breakpoints:{xs:0,sm:576,md:768,lg:992,xl:1200},containerMaxWidths:{sm:540,md:720,lg:960,xl:1140},columns:12,gutterWidth:0},autoFocus:t,required:l,disabled:n,className:a,id:i,style:c},ye(E,(t,n)=>{const{optional:a,render:i}=n,c=Ne(n,ze);let s=h||{};if(a&&!a(Se({data:m},{isFilled:e=>!(!m[e]||!m[e].length),isTrue:e=>m[e]}))&&(s={display:"none"}),i){const n=i;return o.a.createElement(xe.a,Object.assign({},c,{key:t,style:s}),o.a.createElement(n,Object.assign({data:m,key:t,name:t,required:l,schema:d,configSchema:e.configSchema},(null==r?void 0:r[t])||{})))}if(r[t]){const{onChange:e,onBlur:n,onFocus:a,value:l,schema:i,required:u,configSchema:d,eventSchema:h,readSchema:b,isAdditional:v}=r[t];return o.a.createElement(xe.a,Object.assign({styles:{breakpoints:{xs:0,sm:576,md:768,lg:992,xl:1200},containerMaxWidths:{sm:540,md:720,lg:960,xl:1140},columns:12,gutterWidth:0}},c,{key:t,style:s||{},className:[p,v&&y].filter(e=>e&&e.length>0).join(" ")}),o.a.createElement(Be,{key:t,name:t,required:u,schema:i||{},configSchema:d||{},eventSchema:h||{},readSchema:b||{},data:l,onChange:e,onBlur:n,onFocus:a},v&&x&&o.a.createElement("button",{className:j,onClick:Re(x,t,m,f)},"Delete")))}return null},(e,t)=>o.a.createElement(xe.c,{styles:{breakpoints:{xs:0,sm:576,md:768,lg:992,xl:1200},containerMaxWidths:{sm:540,md:720,lg:960,xl:1140},columns:12,gutterWidth:0},key:t},e)),function(e,t,n){return!!n&&(!!e.additionalProperties&&(void 0===e.maxProperties||Object.keys(t).length<e.maxProperties))}(d,m,w)&&o.a.createElement("div",{className:b},o.a.createElement("p",{className:v},o.a.createElement("button",{className:g,onClick:Le(w,m,f)},"Add"))))}},array:{},null:{}};const Ue=e=>"string"==typeof e||"function"==typeof e,Ye=[({configSchema:e})=>Ue(null==e?void 0:e.widget)?{configSchema:{widget:{type:null==e?void 0:e.widget}}}:void 0,({configSchema:e})=>Ue(null==e?void 0:e.help)?{configSchema:{help:{text:null==e?void 0:e.help}}}:void 0,({configSchema:e})=>Ue(null==e?void 0:e.description)?{configSchema:{description:{text:null==e?void 0:e.description}}}:void 0,({configSchema:e})=>Ue(null==e?void 0:e.title)?{configSchema:{title:{text:null==e?void 0:e.title}}}:void 0,({configSchema:e})=>{return t=null==e?void 0:e.error,Array.isArray(t)||"function"==typeof t?{configSchema:{error:{text:null==e?void 0:e.error}}}:void 0;var t},({configSchema:e})=>Ue(null==e?void 0:e.layout)?{configSchema:{layout:{template:null==e?void 0:e.layout}}}:void 0,({configSchema:e})=>!0===(null==e?void 0:e.hidden)?{configSchema:{hidden:{enable:!0}}}:void 0],Xe={common:{configSchema:{title:{className:"jform-title",required:{className:"jform-label-required",text:"*"}},description:{className:"jform-description"},error:{className:"jform-errors",errorClassName:"jform-error"},help:{className:"jform-help"},layout:{className:"jform-field-layout",rootClassName:"jform-field-layout-root",errorClassName:"error-field",render:[{title:{},children:{}},{description:{}},{help:{}},{errors:{}}]},hidden:{className:"jform-hidden"},className:"form-field"}},type:{string:{configSchema:{widget:"text",layout:{className:"string-field"}}},boolean:{configSchema:{widget:"checkbox",layout:{className:"boolean-field"}}},object:{configSchema:{widget:"grid",title:{tag:"legend"},layout:{className:"object-field"}}}},widget:{string:{text:{configSchema:{className:"text-widget"}},select:{configSchema:{className:"select-widget"}}},boolean:{checkbox:{configSchema:{className:"checkbox-widget",layout:{render:({Title:e,Description:t,children:n,Errors:r,Help:a})=>o.a.createElement(o.a.Fragment,null,o.a.createElement(t,null),o.a.createElement("label",null,n,o.a.createElement(e,null)),o.a.createElement(r,null),o.a.createElement(a,null))}}}},object:{grid:{configSchema:{className:"grid-widget",widget:{type:"grid",itemClassName:"grid-item",additionalItemClassName:"additional-item",actionsClassName:"actions-item",actionClassName:"action-item",addKeyButton:"add-key-button",removeKeyButton:"remove-key-button",layout:{md:12}},layout:{tag:"fieldset",render:[{title:{}},{description:{}},{children:{}}]}}}}},rules:[({configSchema:e})=>null!=e&&e.enumNames?{configSchema:{widget:"select"}}:void 0,({schema:e})=>null!=e&&e.enum?{configSchema:{widget:"select"}}:void 0]},Ge=[({schema:e})=>!0===e||null!=e&&e.type?void 0:{schema:{type:z(e||{})}}];const Qe=["schema"],Ve=["schema","configSchema"],Ze=["schema"],et=["schema"],tt=(e,t)=>((e,t)=>{let n=Object(je.a)(e),{schema:r}=n,o=Ne(n,Qe);r=Z(r,r);const a=[...(null==t?void 0:t.rules)||[],...Ge||[],...Ye];return r=G(r,o,(e,t)=>a.map(n=>n(Se({schema:e},t))).reduce((e,t)=>J(e,t))),r=G(r,o,(e,n)=>{var r;let o=e.type,a={defined:Se({schema:e},n),common:t.common};if(null!=t&&null!=(r=t.type)&&r[o]){var l,i,c,s,u,d;const e=t.type[o]||{},{schema:r,configSchema:p}=e,h=Ne(e,Ve);a.type=Se({schema:r,configSchema:p},h);const y=(null==(l=n)||null==(i=l.configSchema)||null==(c=i.widget)?void 0:c.type)||(null==p||null==(s=p.widget)?void 0:s.type);if("string"==typeof y&&null!=t&&null!=(u=t.widget)&&null!=(d=u[o])&&d[y]){var m,f;const e=(null==t||null==(m=t.widget)||null==(f=m[o])?void 0:f[y])||{},{schema:n}=e,r=Ne(e,Ze);a.widget=Se({schema:n},r)}}const p=!0===e;var h,y,b;(e.const||p)&&(null!=a&&null!=(h=a.common)&&h.schema&&(a.common.schema=void 0),null!=a&&null!=(y=a.type)&&y.schema&&(a.type.schema=void 0),null!=a&&null!=(b=a.widget)&&b.schema&&(a.widget.schema=void 0));var v=Object.keys(a.defined).map(e=>{var t,n,r,o;return{[e]:J({},null==a||null==(t=a.common)?void 0:t[e],null==a||null==(n=a.type)?void 0:n[e],null==a||null==(r=a.widget)?void 0:r[e],null==a||null==(o=a.defined)?void 0:o[e])}}).reduce((e,t)=>Se(Se({},e),t));return({schema:e}=v),p&&(e=!0),Se({schema:e},n=Ne(v,et))}),Se({schema:r},o)})(e,t),nt=(e,t,n,r={})=>{let o=R(e)?e:{};const a=R(r)?r:{};let l=t;if(o.$ref){const e=T(o.$ref,n);return nt(e,l,n,a)}if(o.dependencies){const e=me(o,n,a);return nt(e,l,n,a)}switch(R(l)&&R(o.default)?l=J(l,o.default):o.oneOf?o=o.oneOf[ue(void 0,o.oneOf,n)]:o.anyOf&&(o=o.anyOf[ue(void 0,o.anyOf,n)]),void 0===l&&(l=o.default),z(o)){case"object":return Object.keys(o.properties||{}).reduce((e,t)=>{var r,i;let c=nt(null==(r=o.properties)?void 0:r[t],(l||{})[t],n,null==(i=a||{})?void 0:i[t]);return void 0!==c&&(e[t]=c),e},{});case"array":Array.isArray(l)&&(l=l.map((e,t)=>{var r;return nt((null==(r=o.items)?void 0:r[t])||o.additionalItems||{},e,n)})),Array.isArray(a)&&(l=a.map((e,t)=>nt(o.items,(l||{})[t],n,e)))}return l},rt=(e,t)=>{if(Array.isArray(t))return Array.isArray(e)||(e=[]),t.map((t,n)=>e[n]?rt(e[n],t):t);if(R(t)){const n=Object.assign({},e);return Object.keys(t).reduce((n,r)=>(n[r]=rt(e?e[r]:{},t[r]),n),n)}return t};var ot=()=>{const[e,t]=Object(r.useState)(!1),[n,o]=Object(r.useState)(!1);return[e=>{n||(o(!0),e())},(n,o)=>{Object(r.useEffect)(()=>{e?n():t(!0)},o)}]};const at=e=>{const{schema:t={},configSchema:n={},readSchema:r={},eventSchema:o={},validationSchema:a={},rulesSchema:l=[]}=e;return{schema:t,configSchema:n,readSchema:r,eventSchema:o,validationSchema:a,rulesSchema:l}},lt=Object(r.createContext)({});var it=function(e){let{template:t={},widgets:n={},defaults:a={},schemaInitialized:l,errors:i}=e;const[c,s]=Object(r.useState)(e.data),[u,d]=Object(r.useState)(at(e)),[m,f]=Object(r.useState)(u),p=Object(r.useMemo)(()=>J(Object(je.a)(Te),t),[t]),h=Object(r.useMemo)(()=>J(Object(je.a)(Je),n),[n]),y=Object(r.useMemo)(()=>(e=>{var t;return Ye.forEach(t=>{e.common=J(e.common,t(Se({},e.common)));for(let n in e.type)e.type[n]=J(e.type[n],t(Se({},e.type[n])));for(let n in e.widget)for(let r in e.widget[n])e.widget[n][r]=J(e.widget[n][r],t(Se({},e.widget[n][r])))}),e.rules=null==(t=e.rules)?void 0:t.map(e=>t=>{const n=e(Se({},t));return[t,n,...Ye.map(e=>e(Se({},n)))].reduce((e,t)=>Object(Oe.a)(e,t))}),e})(J(Object(je.a)(Xe),a)),[a]),b=()=>{const e=at(u),t=tt(e,y),n=((e,t,n)=>{const r=pe(e,t,n),o=nt(r,e.default,t,n);return null==n?o:n?R(n)||Array.isArray(n)?rt(o,n):n||o:n})(t.schema,t.schema,c);s(n),f(t),l&&l(Se(Se({},t),{},{data:n}))},v=e=>{s(e)},[g,j]=ot(),[,O]=ot();return g(b),j(()=>{const t=at(e);d(t)},[e.schema,e.configSchema,e.defaults]),j(b,[u]),O(()=>v(e.data),[e.data]),o.a.createElement("div",{className:"jform"},o.a.createElement(lt.Provider,{value:{template:p,widgets:h,schema:m.schema,defaults:y}},o.a.createElement("div",{className:"jform-group"},o.a.createElement(Be,Object.assign({data:c},m,{errors:i,onBlur:()=>e.onBlur&&e.onBlur(),onFocus:()=>e.onFocus&&e.onFocus(),onChange:t=>{Object(we.a)(t,c)||(e.onChange&&e.onChange(t),v(t))}}))),e.onSubmit&&o.a.createElement("button",{className:"btn btn-info",onClick:()=>{null==e||null==e.onSubmit||e.onSubmit(c)}},"Submit")))},ct=function(e){var t=Object(u.f)((function(e){return e.theme.selectedDefaults}));return o.a.createElement(it,v()({defaults:t},e))},st={common:{configSchema:{title:{style:{fontWeight:700}},layout:{render:[{title:{}},{children:{}},{description:{}},{help:{}},{errors:{}}],style:{width:"100%",paddingRight:"10px"}}}},type:{object:{configSchema:{title:{style:{marginBottom:"20px",fontSize:"21px",borderBottom:"1px solid #e5e5e5"}}}},string:{configSchema:{className:"user-form-control"}},boolean:{configSchema:{layout:{className:"user-boolean-layout"},style:{width:"20px",height:"20px"},title:{style:{fontWeight:400,cursor:"pointer",marginLeft:"10px",alignSelf:"end"}}}}},widget:{object:{grid:{configSchema:{widget:{itemStyle:{display:"flex",alignItems:"flex-end"}}}}}}},ut=function(){var e=Object(u.f)((function(e){return e.theme})),t=e.defaultsKey,n=e.defaultTypes,r=e.stylesKey,a=e.stylesTypes,l=Object(u.e)((function(e){return e.theme.setDefaults})),i=Object(u.e)((function(e){return e.theme.setStyles})),c={defaults:t,styles:r};return o.a.createElement(ct,v()({defaults:st,data:c},function(e,t,n,r,o){return{schema:{type:"object",properties:{defaults:{title:"Умолчания",enum:t},styles:{title:"Стили",enum:r}}},configSchema:{$styles:{empty:"",hidden:"Bootstrap"!==o.defaults}},eventSchema:{$defaults:{onChange:function(t){return e(t)}},$styles:{onChange:function(e){return n(e)}}}}}(l,n,i,a,c)))},dt=function(){var e=Object(u.f)((function(e){return e.menu.settings})),t=Object(r.useState)(!1),n=y()(t,2),a=n[0],l=n[1];return o.a.createElement(o.a.Fragment,null,o.a.createElement(p.a,{title:"Настройка отображения",placement:"right",onClose:function(){return l(!1)},visible:a},o.a.createElement(ut,null)),o.a.createElement(s.a,{onClick:function(e){switch(e.key){case"settings":l(!0)}},selectable:!1,className:"settings-menu",theme:"dark",mode:"horizontal",items:e}))},mt=n(264),ft=n(1576),pt=n(1577),ht=i.a.Header,yt=function(){var e=Object(u.f)((function(e){return e.menu.collapsed})),t=Object(u.e)((function(e){return e.menu.toggleCollapse}));return o.a.createElement(ht,{className:"header",style:{position:"fixed",zIndex:1,width:"100%"}},o.a.createElement("ul",{className:"ant-menu-overflow ant-menu ant-menu-root ant-menu-horizontal ant-menu-dark menu",role:"menu",tabIndex:"0","data-menu-list":"true"},o.a.createElement("li",{className:"ant-menu-overflow-item ant-menu-item ant-menu-item-only-child menu-header-element menu-collapse-button"},e?o.a.createElement(ft.a,{className:"menu-header-element",onClick:t}):o.a.createElement(pt.a,{className:"menu-header-element",onClick:t})),o.a.createElement("li",{className:"ant-menu-overflow-item ant-menu-item ant-menu-item-only-child menu-header-element"},o.a.createElement(mt.b,{to:"/"},"@Jform - API"))),o.a.createElement(m,null),o.a.createElement(dt,null))},bt=i.a.Sider,vt=function(){var e=Object(u.f)((function(e){return e.menu.sider})),t=Object(u.f)((function(e){return e.menu.collapsed})),n=Object(d.e)(),r=Object(d.d)().pathname;return e?o.a.createElement(bt,{className:"site-layout-background",width:t?0:200},o.a.createElement(s.a,{mode:"inline",style:{height:"100%"},items:e,onSelect:function(e){var t=e.key;n(t)},selectedKeys:[r]})):null},gt=(n(825),n(271)),jt=n.n(gt),Ot=n(243),wt=n.n(Ot),xt=n(291),Et=n.n(xt),St=n(244),kt=n.n(St),Nt=n(209),Ct=n.n(Nt),Pt=n(245),At=n.n(Pt),Ft=n(317),qt=n.n(Ft),Dt=n(318),_t=n.n(Dt),Bt=n(319),$t=n.n(Bt),It=n(717),Mt=n.n(It),Ht=[{schema:{title:"Tell m",type:"object",required:["firstName"],properties:{image:{type:"string",title:"image"},user:{type:"object",title:"user",properties:{password:{type:"string",title:"Password"},username:{type:"string",title:"username"}}},details:{type:"boolean",title:"details"},lastName:{type:"string",title:"Last name"},bio:{type:"string",title:"Bio"},firstName:{type:"string",title:"First name"},age:{type:"string",title:"Age"}}},configSchema:{widget:{layout:[{firstName:{md:6},lastName:{md:6,optional:function(e){return(0,e.isFilled)("firstName")}}},{image:{md:3,optional:function(e){return(0,e.isFilled)("lastName")}},user:{md:9,optional:function(e){return(0,e.isFilled)("lastName")}}},{details:{md:12}},{description:{md:12,optional:function(e){return(0,e.isFilled)("lastName")},render:function(e){var t=e.data,n=(e.errorSchema,t.firstName),r=t.lastName;return o.a.createElement("div",null,o.a.createElement("h3",null,"Hello, ",n," ",r,"!"),o.a.createElement("p",null,"Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sad"))}}},{age:{md:12,optional:function(e){return(0,e.isTrue)("details")}}},{bio:{md:12,optional:function(e){return(0,e.isTrue)("details")}}}]},$user:{widget:{layout:[{username:{md:12}},{password:{md:12}}]}},$image:{title:{display:!1},style:{height:"158px",width:"158px",marginBottom:"1px"}}}}],Kt=(n(1334),n(864)),Tt=n.n(Kt),Wt=(n(1336),n(720)),zt=n.n(Wt),Rt=(n(1337),n(865)),Lt=n.n(Rt),Jt=(n(1339),n(566)),Ut=n.n(Jt),Yt=n(855),Xt=n.n(Yt),Gt=n(540),Qt=n.n(Gt),Vt=n(856),Zt=n.n(Vt),en=n(541),tn=n.n(en),nn=n(857),rn=n.n(nn),on=n(858),an=n.n(on),ln=["children","height"],cn=function(e){var t,n,l=e.children,i=e.height,c=tn()(e,ln),s=Object(r.useState)(null),u=y()(s,2),d=u[0],m=u[1],f=null==d||null===(t=d.contentWindow)||void 0===t||null===(n=t.document)||void 0===n?void 0:n.body,p=function(){var e,t=document.querySelectorAll("head > style"),n=document.querySelector("iframe#form-frame");n&&(n.contentWindow.document.head.querySelectorAll("style").length!==t.length&&(Ct()(e=n.contentWindow.document.head.querySelectorAll("style")).call(e,(function(e){return e.remove()})),Ct()(t).call(t,(function(e){var t=document.createElement("style");t.textContent=e.textContent,n.contentWindow.document.head.appendChild(t)})),console.log("refresh-styles")))};return Object(r.useEffect)((function(){return p()}),[]),an()((function(){p()}),1e3),o.a.createElement("iframe",v()({id:"form-frame"},c,{ref:m,frameborder:"0",style:{position:"relative",width:"100%",height:i||"calc(100vh - 64px)"}}),f&&Object(a.createPortal)(l,f))},sn=n(455),un=n.n(sn),dn=n(859),mn=n.n(dn),fn=n(860),pn=n.n(fn),hn=n(861),yn=n.n(hn),bn=n(862),vn=n.n(bn),gn=n(718),jn=n.n(gn);function On(e,t){var n=jt()(e);if(wt.a){var r=wt()(e);t&&(r=Et()(r).call(r,(function(t){return kt()(e,t).enumerable}))),n.push.apply(n,r)}return n}function wn(e){var t=function(){if("undefined"==typeof Reflect||!un.a)return!1;if(un.a.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(un()(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=jn()(e);if(t){var o=jn()(this).constructor;n=un()(r,arguments,o)}else n=r.apply(this,arguments);return vn()(this,n)}}var xn=function(e){yn()(n,e);var t=wn(n);function n(){return mn()(this,n),t.apply(this,arguments)}return pn()(n,[{key:"componentDidCatch",value:function(){var e;this.setState({}),(e=this.props).onError.apply(e,arguments)}},{key:"render",value:function(){return this.props.children}}]),n}(r.Component),En=Object(r.createContext)({componentDidCatch:{current:void 0},error:void 0,setError:function(){return!1}});function Sn(e){var t=e.children,n=Object(r.useState)(),a=y()(n,2),l=a[0],i=a[1],c=Object(r.useRef)(),s=Object(r.useMemo)((function(){return{componentDidCatch:c,error:l,setError:i}}),[l]);return o.a.createElement(En.Provider,{value:s},o.a.createElement(xn,{error:l,onError:function(e,t){var n;i(e),null===(n=c.current)||void 0===n||n.call(c,e,t)}},t))}var kn,Nn=["height"],Cn=(kn=function(e){var t=e.height,n=tn()(e,Nn),a=Object(u.f)((function(e){return e.theme.selectedStyles})),l=function(e){var t=Object(r.useContext)(En);t.componentDidCatch.current=e;var n=Object(r.useCallback)((function(){t.setError(void 0)}),[]);return[t.error,n]}(),i=y()(l,2),c=i[0],s=i[1];return c?(rn()((function(){return s()}),1e3),c.toString()):o.a.createElement(cn,{height:t},o.a.createElement("link",{rel:"stylesheet",href:a}),o.a.createElement(ct,n))},function(e){return o.a.createElement(Sn,null,o.a.createElement(kn,function(e){for(var t=1;t<arguments.length;t++){var n,r,o=null!=arguments[t]?arguments[t]:{};t%2?Ct()(n=On(Object(o),!0)).call(n,(function(t){$t()(e,t,o[t])})):At.a?qt()(e,At()(o)):Ct()(r=On(Object(o))).call(r,(function(t){_t()(e,t,kt()(o,t))}))}return e}({key:"WrappedComponent"},e)))}),Pn=(n(1405),n(554)),An=n(863),Fn=n.n(An),qn=function(e){var t,n=e.height,r=e.code;return o.a.createElement(Pn.a,{className:"jeditor",language:"javascript",value:(t=r,Fn()(t).call(t).replace(/^ {4}/gm,"")),theme:"vs-light",height:n||700,options:{minimap:{enabled:!1},automaticLayout:!0,readOnly:!0}})},Dn=n(1578),_n=n(1579);function Bn(e,t){var n=jt()(e);if(wt.a){var r=wt()(e);t&&(r=Et()(r).call(r,(function(t){return kt()(e,t).enumerable}))),n.push.apply(n,r)}return n}function $n(e){for(var t=1;t<arguments.length;t++){var n,r,o=null!=arguments[t]?arguments[t]:{};t%2?Ct()(n=Bn(Object(o),!0)).call(n,(function(t){$t()(e,t,o[t])})):At.a?qt()(e,At()(o)):Ct()(r=Bn(Object(o))).call(r,(function(t){_t()(e,t,kt()(o,t))}))}return e}var In=Ut.a.TabPane,Mn={minimap:{enabled:!1},automaticLayout:!0},Hn=function(e){var t=e.editor,n=e.value,r=e.onChange,a=e.options,l=e.height;return o.a.createElement("div",{className:"jeditor-panel"},o.a.createElement(Pn.a,v()({className:"jeditor",language:"json",value:Xt()(n,null,2),theme:"vs-light",onChange:function(e){return r(JSON.parse(e))},height:l||400,options:$n($n({},Mn),a)},t)))},Kn=function(e){var t,n,a=e.formProps,l=e.code,i=e.show,c=void 0===i?{schema:!0,data:!0,configSchema:!0}:i,s=e.useTabs,u=void 0===s||s,d=e.height,m=Object(r.useState)(e.schema),f=y()(m,2),p=f[0],h=f[1],b=Object(r.useState)(e.configSchema),g=y()(b,2),j=g[0],O=g[1],w=Object(r.useState)(e.data),x=y()(w,2),E=x[0],S=x[1],k=Object(r.useState)(!0),N=y()(k,2),C=N[0],P=N[1],A=function(t){e.onChange&&e.onChange(),S(t)},F={schema:c.schema&&p&&Hn({height:d,value:p,onChange:h}),configSchema:c.configSchema&&p&&Hn({height:d,value:j,onChange:O}),data:c.data&&Hn({value:E,height:d,onChange:A}),jsx:c.code&&l&&o.a.createElement(qn,{height:d,code:l})},q=Qt()(t=Et()(n=Zt()(F)).call(n,(function(e){var t=y()(e,2);t[0];return t[1]}))).call(t,(function(e,t){var n=y()(e,2),r=n[0],a=n[1];return u?o.a.createElement(In,{key:t,tab:r},a):a})),D=o.a.createElement(Cn,v()({},a,{height:d,schema:p,configSchema:j,data:E,onChange:A,schemaInitialized:function(e){var t=e.data;return A(t)}}));return o.a.createElement("div",null,o.a.createElement(Tt.a,null,o.a.createElement(Lt.a,{className:"editor-hide-button",onClick:function(){return P(!C)},icon:C?o.a.createElement(Dn.a,null):o.a.createElement(_n.a,null)}),C&&o.a.createElement(zt.a,{span:12},u?o.a.createElement(Ut.a,{tabPosition:"top"},q):q),o.a.createElement(zt.a,{span:C?12:24},u?o.a.createElement(Ut.a,{tabPosition:"top"},o.a.createElement(In,{key:1,tab:"Demo"},D)):D)))};function Tn(e,t){var n=jt()(e);if(wt.a){var r=wt()(e);t&&(r=Et()(r).call(r,(function(t){return kt()(e,t).enumerable}))),n.push.apply(n,r)}return n}function Wn(e){for(var t=1;t<arguments.length;t++){var n,r,o=null!=arguments[t]?arguments[t]:{};t%2?Ct()(n=Tn(Object(o),!0)).call(n,(function(t){$t()(e,t,o[t])})):At.a?qt()(e,At()(o)):Ct()(r=Tn(Object(o))).call(r,(function(t){_t()(e,t,kt()(o,t))}))}return e}var zn=function(e){var t=Object(d.f)().id;return o.a.createElement(Kn,v()({height:600},Ht[Mt()(t)],{formProps:Wn(Wn({},Ht[Mt()(t)]),{},{onSubmit:console.log})}))},Rn={schema:{title:"Форма регистрации",description:"Пример формы",type:"object",required:["firstName","agree"],properties:{firstName:{type:"string",title:"Имя"},sex:{type:"string",title:"Пол",enum:["Мужской","Женский"],default:"Мужской"},agree:{type:"boolean",title:"Согласие на обработку персональных данных",const:!0}}},code:'import JForm from "@jform/core"\n\nconst schema = {\n    "title": "Форма регистрации",\n    "description": "Пример формы",\n    "type": "object",\n    "required": ["firstName","lastName"],\n    "properties": {\n        "firstName": {\n            "type": "string",\n            "title": "Имя"\n        },\n        "sex": {\n            "type": "string",\n             "title": "Пол",\n            "enum": ["Мужской", "Женский"]\n        },\n        "agree": {\n            "type": "boolean",\n            "title": "Согласие на обработку персональных данных",\n            "const": true\n        }\n    }\n}\n\nconst App = () => (\n <JForm schema={schema}/>\n)'};function Ln(e,t){var n=jt()(e);if(wt.a){var r=wt()(e);t&&(r=Et()(r).call(r,(function(t){return kt()(e,t).enumerable}))),n.push.apply(n,r)}return n}function Jn(e){for(var t=1;t<arguments.length;t++){var n,r,o=null!=arguments[t]?arguments[t]:{};t%2?Ct()(n=Ln(Object(o),!0)).call(n,(function(t){$t()(e,t,o[t])})):At.a?qt()(e,At()(o)):Ct()(r=Ln(Object(o))).call(r,(function(t){_t()(e,t,kt()(o,t))}))}return e}var Un=function(){return o.a.createElement("div",null,o.a.createElement("h1",{style:{textAlign:"center",paddingBottom:"0.3em",fontSize:"2em",borderBottom:"1px solid hsla(210,18%,87%,1)"}},"JForm"),o.a.createElement("h3",{style:{textAlign:"center"}},o.a.createElement("a",{href:"http://facebook.github.io/react/"},"React")," компонент для декларативного построения форм на базе ",o.a.createElement("a",{href:"http://json-schema.org/"},"JsonSchema")),o.a.createElement("h1",{style:{paddingBottom:"0.3em",fontSize:"2em",borderBottom:"1px solid hsla(210,18%,87%,1)"}},"Поддержка"),o.a.createElement("ul",null,o.a.createElement("li",null,"Генерация из JsonSchema с поддержкой ",o.a.createElement("a",{href:"https://json-schema.org/draft-07/json-schema-release-notes.html"},"Draft 7")),o.a.createElement("li",null,o.a.createElement(mt.b,{to:"/solutions/0"},"Динамическая верстка"))),o.a.createElement("h1",{style:{paddingBottom:"0.3em",fontSize:"2em",borderBottom:"1px solid hsla(210,18%,87%,1)"}},"Установка"),"npm install @jform/core",o.a.createElement("h1",{style:{paddingBottom:"0.3em",fontSize:"2em",borderBottom:"1px solid hsla(210,18%,87%,1)"}},"Использование"),o.a.createElement(Kn,v()({},Rn,{height:390,show:{code:!0},useTabs:!1,formProps:Jn(Jn({},Rn),{},{onSubmit:console.log})})))},Yn=function(){return"b"},Xn=[{path:"",element:o.a.createElement(Un,null)},{path:"/documentation",children:[{path:"",element:o.a.createElement(d.a,{to:"/documentation/schema",replace:!0})},{path:"/documentation/schema",element:"/documentation/schema"},{path:"/documentation/configSchema",children:[{path:"",element:o.a.createElement(d.a,{to:"/documentation/configSchema/elements",replace:!0})},{path:"/documentation/configSchema/elements",element:"/documentation/configSchema/elements"},{path:"/documentation/configSchema/layout",element:"/documentation/configSchema/layout"},{path:"/documentation/configSchema/styles",element:"/documentation/configSchema/styles"}]},{path:"/documentation/types",children:[{path:"",element:o.a.createElement(d.a,{to:"/documentation/types/string",replace:!0})},{path:"/documentation/types/string",element:"/documentation/types/string"},{path:"/documentation/types/boolean",element:o.a.createElement(Yn,null)},{path:"/documentation/types/object",element:"/documentation/types/object"}]},{path:"/documentation/events",element:"/documentation/events"},{path:"/documentation/defaults",element:"/documentation/defaults"}]},{path:"/components"},{path:"/examples"},{path:"/solutions",children:[{path:"",element:o.a.createElement(d.a,{to:"/solutions/0",replace:!0})},{path:":id",element:o.a.createElement(zn,null)}]}],Gn=i.a.Content,Qn=function(e){var t=Object(d.h)(Xn);return o.a.createElement(o.a.Fragment,null,o.a.createElement(Gn,{style:{padding:"0 24px",minHeight:280}},t))},Vn=i.a.Content,Zn=function(){return o.a.createElement(i.a,null,o.a.createElement(yt,null),o.a.createElement(Vn,{style:{marginTop:64}},o.a.createElement(i.a,{className:"site-layout-background"},o.a.createElement(vt,null),o.a.createElement(Qn,null))))},er=function(e){return o.a.createElement(o.a.Fragment,null,o.a.createElement(mt.a,{basename:"/jform"},o.a.createElement(Zn,null)))},tr=n(552),nr=n.n(tr),rr=n(1580),or={header:[{label:"Документация",sider:[{label:"Схема",key:"/documentation/schema"},{label:"Визуальная схема",key:"/documentation/configSchema",children:[{label:"Элементы",key:"/documentation/configSchema/elements"},{label:"Верстка",key:"/documentation/configSchema/layout"},{label:"Стилизация",key:"/documentation/configSchema/styles"}]},{label:"Типы",key:"/documentation/types",children:[{label:"Строка",key:"/documentation/types/string"},{label:"Логическое",key:"/documentation/types/boolean"},{label:"Объект",key:"/documentation/types/object"}]},{label:"События",key:"/documentation/events"},{label:"Умолчания",key:"/documentation/defaults"}],key:"/documentation"},{label:"Виджеты",sider:[{label:"string",key:"/components/string",children:[{label:"text",key:"/components/string/text"},{label:"select",key:"/components/string/select"}]},{label:"boolean",key:"/components/boolean",children:[{label:"checkbox",key:"/components/boolean/checkbox"},{label:"select",key:"/components/boolean/select"}]},{label:"object",key:"/components/object",children:[{label:"grid",key:"/components/object/grid"}]}],key:"/components"},{label:"Примеры",sider:[],key:"/examples"},{label:"Решения",sider:[{label:"Динамическая верстка",key:"/solutions/0"}],key:"/solutions"}],settings:[{key:"settings",icon:o.a.createElement(rr.a,{className:"menu-header-element"})}],menuKey:"/",collapsed:!1,sider:Object(u.c)((function(e){var t,n=nr()(t=e.header).call(t,(function(t){return t.key===e.menuKey}));return n?n.sider:null})),selectMenu:Object(u.b)((function(e,t){e.menuKey=t})),toggleCollapse:Object(u.b)((function(e,t){e.collapsed=!e.collapsed}))},ar={defaultsKey:"Пользовательские стили",stylesKey:null,templates:[{title:"Пользовательские стили",value:st},{title:"Bootstrap",value:{common:{configSchema:{layout:{className:"form-group",style:{width:"100%",paddingRight:"10px"}}}},type:{string:{configSchema:{className:"form-control"}}},widget:{boolean:{checkbox:{configSchema:{title:{tag:"span"},layout:{className:"checkbox"}}}}}}}],styles:{cerulean:{stylesheet:"//cdnjs.cloudflare.com/ajax/libs/bootswatch/3.3.6/cerulean/bootstrap.min.css"},cosmo:{stylesheet:"//cdnjs.cloudflare.com/ajax/libs/bootswatch/3.3.6/cosmo/bootstrap.min.css"},cyborg:{stylesheet:"//cdnjs.cloudflare.com/ajax/libs/bootswatch/3.3.6/cyborg/bootstrap.min.css"},darkly:{stylesheet:"//cdnjs.cloudflare.com/ajax/libs/bootswatch/3.3.6/darkly/bootstrap.min.css"},flatly:{stylesheet:"//cdnjs.cloudflare.com/ajax/libs/bootswatch/3.3.6/flatly/bootstrap.min.css"},journal:{stylesheet:"//cdnjs.cloudflare.com/ajax/libs/bootswatch/3.3.6/journal/bootstrap.min.css"},lumen:{stylesheet:"//cdnjs.cloudflare.com/ajax/libs/bootswatch/3.3.6/lumen/bootstrap.min.css"},paper:{stylesheet:"//cdnjs.cloudflare.com/ajax/libs/bootswatch/3.3.6/paper/bootstrap.min.css"},readable:{stylesheet:"//cdnjs.cloudflare.com/ajax/libs/bootswatch/3.3.6/readable/bootstrap.min.css"},sandstone:{stylesheet:"//cdnjs.cloudflare.com/ajax/libs/bootswatch/3.3.6/sandstone/bootstrap.min.css"},simplex:{stylesheet:"//cdnjs.cloudflare.com/ajax/libs/bootswatch/3.3.6/simplex/bootstrap.min.css"},slate:{stylesheet:"//cdnjs.cloudflare.com/ajax/libs/bootswatch/3.3.6/slate/bootstrap.min.css"},spacelab:{stylesheet:"//cdnjs.cloudflare.com/ajax/libs/bootswatch/3.3.6/spacelab/bootstrap.min.css"},"solarized-dark":{stylesheet:"//cdn.rawgit.com/aalpern/bootstrap-solarized/master/bootstrap-solarized-dark.css"},"solarized-light":{stylesheet:"//cdn.rawgit.com/aalpern/bootstrap-solarized/master/bootstrap-solarized-light.css"},superhero:{stylesheet:"//cdnjs.cloudflare.com/ajax/libs/bootswatch/3.3.6/superhero/bootstrap.min.css"},united:{stylesheet:"//cdnjs.cloudflare.com/ajax/libs/bootswatch/3.3.6/united/bootstrap.min.css"},yeti:{stylesheet:"//cdnjs.cloudflare.com/ajax/libs/bootswatch/3.3.6/yeti/bootstrap.min.css"},"bootstrap-4":{stylesheet:"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css"}},defaultTypes:Object(u.c)((function(e){var t;return Qt()(t=e.templates).call(t,(function(e){return e.title}))})),stylesTypes:Object(u.c)((function(e){return jt()(e.styles)})),selectedDefaults:Object(u.c)((function(e){var t;return(nr()(t=e.templates).call(t,(function(t){return t.title===e.defaultsKey}))||{value:{}}).value})),selectedStyles:Object(u.c)((function(e){return e.stylesKey&&"Bootstrap"===e.defaultsKey?e.styles[e.stylesKey].stylesheet:null})),setDefaults:Object(u.b)((function(e,t){e.defaultsKey=t,"Bootstrap"!==t&&(e.stylesKey="")})),setStyles:Object(u.b)((function(e,t){e.stylesKey=t}))},lr=Object(u.d)({menu:or,theme:ar}),ir=n(866);Object(a.render)(o.a.createElement(ir.a,null,o.a.createElement(u.a,{store:lr},o.a.createElement(er,null))),document.getElementById("app"))},571:function(e,t,n){(e.exports=n(32)(void 0)).push([e.i,".ant-layout .ant-layout-sider-trigger {\r\n    position: absolute\r\n}\r\n\r\n.header {\r\n    display: flex\r\n}\r\n\r\n.settings-menu {\r\n    flex-grow: 0.25;\r\n    justify-content: flex-end;\r\n}\r\n\r\n.menu {\r\n    flex-grow: 1;\r\n}\r\n\r\n.header .ant-menu-dark.ant-menu-horizontal >   .ant-menu-item:hover {\r\n    background-color: #4dc193;\r\n}\r\n\r\n.menu-collapse-button {\r\n    position: absolute;\r\n    left: 0;\r\n}",""])},572:function(e,t,n){(e.exports=n(32)(void 0)).push([e.i,".header .menu-header-element.menu-collapse-button {\r\n    position: absolute;\r\n    left: 0;\r\n}",""])},576:function(e,t,n){var r=n(577);"string"==typeof r&&(r=[[e.i,r,""]]);var o={transform:void 0},a=n(33)(r,o);r.locals&&(e.exports=r.locals),r.locals||e.hot.accept(577,(function(){var t=n(577);"string"==typeof t&&(t=[[e.i,t,""]]),a(t)})),e.hot.dispose((function(){a()}))},577:function(e,t,n){(e.exports=n(32)(void 0)).push([e.i,".header .menu-header-element {\r\n    font-size: 30px;\r\n    font-weight: bold;\r\n}",""])},638:function(e,t,n){(e.exports=n(32)(void 0)).push([e.i,".user-form-control {\r\n    width: 100%;\r\n    height: 34px;\r\n    padding: 6px 12px;\r\n    font-size: 14px;\r\n    line-height: 1.42857143;\r\n    border: 1px solid #ccc;\r\n    border-radius: 4px;\r\n    -webkit-box-shadow: inset 0 1px 1px rgb(0 0 0 / 8%);\r\n    box-shadow: inset 0 1px 1px rgb(0 0 0 / 8%);\r\n    -webkit-transition: border-color ease-in-out .15s,-webkit-box-shadow ease-in-out .15s;\r\n    -o-transition: border-color ease-in-out .15s,box-shadow ease-in-out .15s;\r\n    transition: border-color ease-in-out .15s,box-shadow ease-in-out .15s;\r\n    margin-bottom: 15px;\r\n}\r\n\r\n.user-form-control select {\r\n    width: 100%\r\n}\r\n\r\n\r\n.user-form-control:focus {\r\n    border-color: #66afe9;\r\n    outline: 0;\r\n    -webkit-box-shadow: inset 0 1px 1px rgb(0 0 0 / 8%), 0 0 8px rgb(102 175 233 / 60%);\r\n    box-shadow: inset 0 1px 1px rgb(0 0 0 / 8%), 0 0 8px rgb(102 175 233 / 60%);\r\n}\r\n\r\n.user-boolean-layout {\r\n    position: relative;\r\n    display: block;\r\n    margin-top: 10px;\r\n    margin-bottom: 10px;\r\n}\r\n\r\n.user-boolean-layout label {\r\n    display: flex;\r\n}",""])},644:function(e,t,n){(e.exports=n(32)(void 0)).push([e.i,".editor-header {\r\n    border-bottom: 2px solid #1DA57A;\r\n}\r\n\r\n.jeditor .codicon-folding-collapsed:before {\r\n    content: '+';\r\n}\r\n\r\n.jeditor .codicon-folding-expanded:before {\r\n    content: '-';\r\n}\r\n\r\n.jeditor-panel {\r\n    border-color: #ddd;\r\n    margin-bottom: 20px;\r\n    background-color: #fff;\r\n    border: 1px solid transparent;\r\n    border-radius: 4px;\r\n    -webkit-box-shadow: 0 1px 1px rgb(0 0 0 / 5%);\r\n    box-shadow: 0 1px 1px rgb(0 0 0 / 5%);\r\n}\r\n\r\n.editor-hide-button.ant-btn {\r\n    position: absolute;\r\n    margin-left: -25px;\r\n    border: none;\r\n    background: none;\r\n    margin-top: 8px;\r\n}",""])},825:function(e,t,n){var r=n(638);"string"==typeof r&&(r=[[e.i,r,""]]);var o={transform:void 0},a=n(33)(r,o);r.locals&&(e.exports=r.locals),r.locals||e.hot.accept(638,(function(){var t=n(638);"string"==typeof t&&(t=[[e.i,t,""]]),a(t)})),e.hot.dispose((function(){a()}))},869:function(e,t,n){e.exports=n(1529)},876:function(e,t,n){var r=n(571);"string"==typeof r&&(r=[[e.i,r,""]]);var o={transform:void 0},a=n(33)(r,o);r.locals&&(e.exports=r.locals),r.locals||e.hot.accept(571,(function(){var t=n(571);"string"==typeof t&&(t=[[e.i,t,""]]),a(t)})),e.hot.dispose((function(){a()}))},877:function(e,t,n){var r=n(572);"string"==typeof r&&(r=[[e.i,r,""]]);var o={transform:void 0},a=n(33)(r,o);r.locals&&(e.exports=r.locals),r.locals||e.hot.accept(572,(function(){var t=n(572);"string"==typeof t&&(t=[[e.i,t,""]]),a(t)})),e.hot.dispose((function(){a()}))}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,